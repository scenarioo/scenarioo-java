/* scenarioo-api
 * Copyright (C) 2014, scenarioo.org Development Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this library with independent modules, according
 * to the GNU General Public License with "Classpath" exception as provided
 * in the LICENSE file that accompanied this code.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


group = 'org.scenarioo'
version = '3.0.0-SNAPSHOT'

apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.0.1'
    implementation 'commons-io:commons-io:1.3.2'
    implementation 'commons-codec:commons-codec:1.2'
    implementation 'log4j:log4j:1.2.17'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.2'

    //These libraries are no longer provided in Java 9+, thus we need to add them manually
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.2'
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Scenarioo Java'
                packaging = 'jar'
                description = 'Scenarioo Writer library for Java to generate Scenarioo Documentation http://www.scenarioo.org'
                url = 'http://www.scenarioo.org'

                scm {
                    connection = 'https://github.com/scenarioo/scenarioo-java.git'
                    developerConnection = 'https://github.com/scenarioo/scenarioo-java.git'
                    url = 'https://github.com/scenarioo/scenarioo-java.git'
                }

                licenses {
                    license {
                        name = 'GNU GENERAL PUBLIC LICENCE with linking exception'
                        url = 'https://github.com/scenarioo/scenarioo-java/blob/develop/LICENSE.txt'
                    }
                }

                developers {
                    developer {
                        id = 'scenarioo'
                        name = 'Scenarioo'
                        email = 'contact@scenarioo.org'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            if (version.contains("SNAPSHOT")) {
                url "https://oss.sonatype.org/content/repositories/snapshots/"
            } else {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            }
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

if (ossrhPassword) {
    signing {
        sign publishing.publications.mavenJava
    }
}

task generateSchema(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    main = 'org.scenarioo.util.GenerateScenariooApiSchema'
}

jar.dependsOn generateSchema

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = "6.7.1"
}


